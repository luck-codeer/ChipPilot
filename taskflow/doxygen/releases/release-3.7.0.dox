namespace tf {

/** @page release-3-7-0 Release 3.7.0 (Master)

%Taskflow 3.7.0 is the newest developing line to new features and improvements 
we continue to support.
It is also where this documentation is generated.
Many things are considered @em experimental and may change or break from time to time.
While it may be difficult to be keep all things consistent when introducing new features, 
we continue to try our best to ensure backward compatibility.

@tableofcontents

@section release-3-7-0_download Download

To download the newest version of %Taskflow, please clone the master branch 
from <a href="https://github.com/taskflow/taskflow">%Taskflow's GitHub</a>.

@section release-3-7-0_system_requirements System Requirements

To use %Taskflow v3.7.0, you need a compiler that supports C++17:

@li GNU C++ Compiler at least v8.4 with -std=c++17
@li Clang C++ Compiler at least v6.0 with -std=c++17
@li Microsoft Visual Studio at least v19.27 with /std:c++17
@li AppleClang Xcode Version at least v12.0 with -std=c++17
@li Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17
@li Intel C++ Compiler at least v19.0.1 with -std=c++17
@li Intel DPC++ Clang Compiler at least v13.0.0 with -std=c++17 and SYCL20

%Taskflow works on Linux, Windows, and Mac OS X.

@section release-3-7-0_summary Release Summary

@section release-3-7-0_new_features New Features

@subsection release-3-7-0_taskflow_core Taskflow Core

+ Improved scheduling performance of dependent asynchronous tasks
+ Improved scheduling performance of module task by removing busy looping
+ Improved tf::Executor::wait_for_all using C++20 atomic wait
+ Improved tf::Notifier using C++20 atomic wait 
+ Improved worker-thread ID mapping performance using C++20 atomic wait
+ Added `-Wshadow` to the compilation check
+ Added tf::AsyncTask::is_done to query the completion status of an async task
+ Added tf::Taskflow::remove_dependency to remove dependencies from the graph
+ Added support for exception in tf::Taskflow and tf::Executor

@code{.cpp}
tf::Executor executor;
tf::Taskflow taskflow;
taskflow.emplace([](){ throw std::runtime_error("exception"); });
try {
  executor.run(taskflow).get();
}
catch(const std::runtime_error& e) {
  std::cerr << e.what() << std::endl;
}
@endcode

+ Modified the CI to exclude exception test under sanitizers 

@subsection release-3-7-0_utilities Utilities

@section release-3-7-0_bug_fixes Bug Fixes 

+ Fixed compilation erros of CUDA examples caused by not including `for_each.hpp`
+ Fixed the runtime error of tf::Taskflow::for_each_index when the range invalid 

@section release-3-7-0_breaking_changes Breaking Changes

+ Renamed tf::Runtime::join to tf::Runtime::corun_all
+ Removed tf::WorkerInterface due to the support of exception 

@section release-3-7-0_documentation Documentation

+ Revised @ref DependentAsyncTasking
  + Added @ref QueryTheComppletionStatusOfDependentAsyncTasks
+ Revised @ref ExceptionHandling 
+ Revised @ref ExecuteTaskflow
  + Removed the section of tf::WorkerInterface

@section release-3-7-0_miscellaneous_items Miscellaneous Items

Please do not hesitate to contact @twhuang if you intend to collaborate with us 
on using %Taskflow in your scientific computing projects.

*/

}


